lower_letter = ?/[a-z]/? ;
upper_letter = ?/[A-Z]/? ;
letter = lower_letter | upper_letter ;
letters = {letter}+ ;
number = ?/[0-9]/? ;
numbers = {number}+ ;
number_range = numbers '-' numbers ;
punct = ?/[!"$%&*+,\-./:;<=>?@ [\\\]^_`|~]/? ;
text = {letter | punct}+ ;
string = "'" text "'" ;

lbrace = '{' ;
rbrace = '}' ;
lbrack = '(' ;
rbrack = ')' ;
nline = '\n';

primitive = upper_letter letters ;
identifier = letter { letter | '_' | number }* ;
assignment = '=' ;
space = ' ' | '\t' ;
spaces = {space}* ;

section_start = primitive space identifier [space] lbrace ;
section = section_start [nline] section_statements rbrace {nline}+ ;

ip4 = ?/(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/? ;
ip6 = ?/(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/? ;
ipmask = '/' numbers ;

atype = identifier | ip4 ipmask | ip6 ipmask | ip4 | ip6 | number_range | numbers | string ;
notes = lbrack text rbrack ;

value_assignment = identifier spaces assignment spaces (atype | map) [spaces notes] ;

arrow = '->' ;
access = identifier arrow (identifier | numbers) | identifier arrow access ;

access_assign = access spaces assignment spaces atype [spaces notes] ;
connection = identifier arrow numbers ;

colon = ':' ;
next = ',' [nline];
map_entry = spaces (numbers | identifier) spaces colon spaces (connection | atype) spaces;
map = lbrace {map_entry next}* map_entry rbrace;

section_statement = spaces (value_assignment | access_assign | tunnel_route) spaces {nline | spaces}+ ;
section_statements = {section_statement}+ ;

tunnel_route = 'Tunnel' space identifier space 'via' space identifier ;

start = {section}+ ;
